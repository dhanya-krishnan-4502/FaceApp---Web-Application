{"ast":null,"code":"import * as tslib_1 from \"tslib\";\nimport * as tf from '@tensorflow/tfjs-core';\nimport { NeuralNetwork, normalize, toNetInput } from 'tfjs-image-recognition-base';\nimport { convDown } from './convLayer';\nimport { extractParams } from './extractParams';\nimport { extractParamsFromWeigthMap } from './extractParamsFromWeigthMap';\nimport { residual, residualDown } from './residualLayer';\nvar FaceRecognitionNet = /** @class */function (_super) {\n  tslib_1.__extends(FaceRecognitionNet, _super);\n  function FaceRecognitionNet() {\n    return _super.call(this, 'FaceRecognitionNet') || this;\n  }\n  FaceRecognitionNet.prototype.forwardInput = function (input) {\n    var params = this.params;\n    if (!params) {\n      throw new Error('FaceRecognitionNet - load model before inference');\n    }\n    return tf.tidy(function () {\n      var batchTensor = input.toBatchTensor(150, true).toFloat();\n      var meanRgb = [122.782, 117.001, 104.298];\n      var normalized = normalize(batchTensor, meanRgb).div(tf.scalar(256));\n      var out = convDown(normalized, params.conv32_down);\n      out = tf.maxPool(out, 3, 2, 'valid');\n      out = residual(out, params.conv32_1);\n      out = residual(out, params.conv32_2);\n      out = residual(out, params.conv32_3);\n      out = residualDown(out, params.conv64_down);\n      out = residual(out, params.conv64_1);\n      out = residual(out, params.conv64_2);\n      out = residual(out, params.conv64_3);\n      out = residualDown(out, params.conv128_down);\n      out = residual(out, params.conv128_1);\n      out = residual(out, params.conv128_2);\n      out = residualDown(out, params.conv256_down);\n      out = residual(out, params.conv256_1);\n      out = residual(out, params.conv256_2);\n      out = residualDown(out, params.conv256_down_out);\n      var globalAvg = out.mean([1, 2]);\n      var fullyConnected = tf.matMul(globalAvg, params.fc);\n      return fullyConnected;\n    });\n  };\n  FaceRecognitionNet.prototype.forward = function (input) {\n    return tslib_1.__awaiter(this, void 0, void 0, function () {\n      var _a;\n      return tslib_1.__generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            _a = this.forwardInput;\n            return [4 /*yield*/, toNetInput(input)];\n          case 1:\n            return [2 /*return*/, _a.apply(this, [_b.sent()])];\n        }\n      });\n    });\n  };\n  FaceRecognitionNet.prototype.computeFaceDescriptor = function (input) {\n    return tslib_1.__awaiter(this, void 0, void 0, function () {\n      var netInput, faceDescriptorTensors, faceDescriptorsForBatch;\n      var _this = this;\n      return tslib_1.__generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, toNetInput(input)];\n          case 1:\n            netInput = _a.sent();\n            faceDescriptorTensors = tf.tidy(function () {\n              return tf.unstack(_this.forwardInput(netInput));\n            });\n            return [4 /*yield*/, Promise.all(faceDescriptorTensors.map(function (t) {\n              return t.data();\n            }))];\n          case 2:\n            faceDescriptorsForBatch = _a.sent();\n            faceDescriptorTensors.forEach(function (t) {\n              return t.dispose();\n            });\n            return [2 /*return*/, netInput.isBatchInput ? faceDescriptorsForBatch : faceDescriptorsForBatch[0]];\n        }\n      });\n    });\n  };\n  FaceRecognitionNet.prototype.getDefaultModelName = function () {\n    return 'face_recognition_model';\n  };\n  FaceRecognitionNet.prototype.extractParamsFromWeigthMap = function (weightMap) {\n    return extractParamsFromWeigthMap(weightMap);\n  };\n  FaceRecognitionNet.prototype.extractParams = function (weights) {\n    return extractParams(weights);\n  };\n  return FaceRecognitionNet;\n}(NeuralNetwork);\nexport { FaceRecognitionNet };","map":{"version":3,"names":["tf","NeuralNetwork","normalize","toNetInput","convDown","extractParams","extractParamsFromWeigthMap","residual","residualDown","FaceRecognitionNet","_super","tslib_1","__extends","call","prototype","forwardInput","input","params","Error","tidy","batchTensor","toBatchTensor","toFloat","meanRgb","normalized","div","scalar","out","conv32_down","maxPool","conv32_1","conv32_2","conv32_3","conv64_down","conv64_1","conv64_2","conv64_3","conv128_down","conv128_1","conv128_2","conv256_down","conv256_1","conv256_2","conv256_down_out","globalAvg","mean","fullyConnected","matMul","fc","forward","_a","apply","_b","sent","computeFaceDescriptor","netInput","faceDescriptorTensors","unstack","_this","Promise","all","map","t","data","faceDescriptorsForBatch","forEach","dispose","isBatchInput","getDefaultModelName","weightMap","weights"],"sources":["/Users/dhanya/node_modules/face-api.js/src/faceRecognitionNet/FaceRecognitionNet.ts"],"sourcesContent":["import * as tf from '@tensorflow/tfjs-core';\r\nimport { NetInput, NeuralNetwork, normalize, TNetInput, toNetInput } from 'tfjs-image-recognition-base';\r\n\r\nimport { convDown } from './convLayer';\r\nimport { extractParams } from './extractParams';\r\nimport { extractParamsFromWeigthMap } from './extractParamsFromWeigthMap';\r\nimport { residual, residualDown } from './residualLayer';\r\nimport { NetParams } from './types';\r\n\r\n\r\nexport class FaceRecognitionNet extends NeuralNetwork<NetParams> {\r\n\r\n  constructor() {\r\n    super('FaceRecognitionNet')\r\n  }\r\n\r\n  public forwardInput(input: NetInput): tf.Tensor2D {\r\n\r\n    const { params } = this\r\n\r\n    if (!params) {\r\n      throw new Error('FaceRecognitionNet - load model before inference')\r\n    }\r\n\r\n    return tf.tidy(() => {\r\n      const batchTensor = input.toBatchTensor(150, true).toFloat()\r\n\r\n      const meanRgb = [122.782, 117.001, 104.298]\r\n      const normalized = normalize(batchTensor, meanRgb).div(tf.scalar(256)) as tf.Tensor4D\r\n\r\n      let out = convDown(normalized, params.conv32_down)\r\n      out = tf.maxPool(out, 3, 2, 'valid')\r\n\r\n      out = residual(out, params.conv32_1)\r\n      out = residual(out, params.conv32_2)\r\n      out = residual(out, params.conv32_3)\r\n\r\n      out = residualDown(out, params.conv64_down)\r\n      out = residual(out, params.conv64_1)\r\n      out = residual(out, params.conv64_2)\r\n      out = residual(out, params.conv64_3)\r\n\r\n      out = residualDown(out, params.conv128_down)\r\n      out = residual(out, params.conv128_1)\r\n      out = residual(out, params.conv128_2)\r\n\r\n      out = residualDown(out, params.conv256_down)\r\n      out = residual(out, params.conv256_1)\r\n      out = residual(out, params.conv256_2)\r\n      out = residualDown(out, params.conv256_down_out)\r\n\r\n      const globalAvg = out.mean([1, 2]) as tf.Tensor2D\r\n      const fullyConnected = tf.matMul(globalAvg, params.fc)\r\n\r\n      return fullyConnected\r\n    })\r\n  }\r\n\r\n  public async forward(input: TNetInput): Promise<tf.Tensor2D> {\r\n    return this.forwardInput(await toNetInput(input))\r\n  }\r\n\r\n  public async computeFaceDescriptor(input: TNetInput): Promise<Float32Array|Float32Array[]> {\r\n    const netInput = await toNetInput(input)\r\n\r\n    const faceDescriptorTensors = tf.tidy(\r\n      () => tf.unstack(this.forwardInput(netInput))\r\n    )\r\n\r\n    const faceDescriptorsForBatch = await Promise.all(faceDescriptorTensors.map(\r\n      t => t.data()\r\n    )) as Float32Array[]\r\n\r\n    faceDescriptorTensors.forEach(t => t.dispose())\r\n\r\n    return netInput.isBatchInput\r\n      ? faceDescriptorsForBatch\r\n      : faceDescriptorsForBatch[0]\r\n  }\r\n\r\n  protected getDefaultModelName(): string {\r\n    return 'face_recognition_model'\r\n  }\r\n\r\n  protected extractParamsFromWeigthMap(weightMap: tf.NamedTensorMap) {\r\n    return extractParamsFromWeigthMap(weightMap)\r\n  }\r\n\r\n  protected extractParams(weights: Float32Array) {\r\n    return extractParams(weights)\r\n  }\r\n}"],"mappings":";AAAA,OAAO,KAAKA,EAAE,MAAM,uBAAuB;AAC3C,SAAmBC,aAAa,EAAEC,SAAS,EAAaC,UAAU,QAAQ,6BAA6B;AAEvG,SAASC,QAAQ,QAAQ,aAAa;AACtC,SAASC,aAAa,QAAQ,iBAAiB;AAC/C,SAASC,0BAA0B,QAAQ,8BAA8B;AACzE,SAASC,QAAQ,EAAEC,YAAY,QAAQ,iBAAiB;AAIxD,IAAAC,kBAAA,0BAAAC,MAAA;EAAwCC,OAAA,CAAAC,SAAA,CAAAH,kBAAA,EAAAC,MAAA;EAEtC,SAAAD,mBAAA;WACEC,MAAA,CAAAG,IAAA,OAAM,oBAAoB,CAAC;EAC7B;EAEOJ,kBAAA,CAAAK,SAAA,CAAAC,YAAY,GAAnB,UAAoBC,KAAe;IAEzB,IAAAC,MAAA,QAAAA,MAAM;IAEd,IAAI,CAACA,MAAM,EAAE;MACX,MAAM,IAAIC,KAAK,CAAC,kDAAkD,CAAC;;IAGrE,OAAOlB,EAAE,CAACmB,IAAI,CAAC;MACb,IAAMC,WAAW,GAAGJ,KAAK,CAACK,aAAa,CAAC,GAAG,EAAE,IAAI,CAAC,CAACC,OAAO,EAAE;MAE5D,IAAMC,OAAO,GAAG,CAAC,OAAO,EAAE,OAAO,EAAE,OAAO,CAAC;MAC3C,IAAMC,UAAU,GAAGtB,SAAS,CAACkB,WAAW,EAAEG,OAAO,CAAC,CAACE,GAAG,CAACzB,EAAE,CAAC0B,MAAM,CAAC,GAAG,CAAC,CAAgB;MAErF,IAAIC,GAAG,GAAGvB,QAAQ,CAACoB,UAAU,EAAEP,MAAM,CAACW,WAAW,CAAC;MAClDD,GAAG,GAAG3B,EAAE,CAAC6B,OAAO,CAACF,GAAG,EAAE,CAAC,EAAE,CAAC,EAAE,OAAO,CAAC;MAEpCA,GAAG,GAAGpB,QAAQ,CAACoB,GAAG,EAAEV,MAAM,CAACa,QAAQ,CAAC;MACpCH,GAAG,GAAGpB,QAAQ,CAACoB,GAAG,EAAEV,MAAM,CAACc,QAAQ,CAAC;MACpCJ,GAAG,GAAGpB,QAAQ,CAACoB,GAAG,EAAEV,MAAM,CAACe,QAAQ,CAAC;MAEpCL,GAAG,GAAGnB,YAAY,CAACmB,GAAG,EAAEV,MAAM,CAACgB,WAAW,CAAC;MAC3CN,GAAG,GAAGpB,QAAQ,CAACoB,GAAG,EAAEV,MAAM,CAACiB,QAAQ,CAAC;MACpCP,GAAG,GAAGpB,QAAQ,CAACoB,GAAG,EAAEV,MAAM,CAACkB,QAAQ,CAAC;MACpCR,GAAG,GAAGpB,QAAQ,CAACoB,GAAG,EAAEV,MAAM,CAACmB,QAAQ,CAAC;MAEpCT,GAAG,GAAGnB,YAAY,CAACmB,GAAG,EAAEV,MAAM,CAACoB,YAAY,CAAC;MAC5CV,GAAG,GAAGpB,QAAQ,CAACoB,GAAG,EAAEV,MAAM,CAACqB,SAAS,CAAC;MACrCX,GAAG,GAAGpB,QAAQ,CAACoB,GAAG,EAAEV,MAAM,CAACsB,SAAS,CAAC;MAErCZ,GAAG,GAAGnB,YAAY,CAACmB,GAAG,EAAEV,MAAM,CAACuB,YAAY,CAAC;MAC5Cb,GAAG,GAAGpB,QAAQ,CAACoB,GAAG,EAAEV,MAAM,CAACwB,SAAS,CAAC;MACrCd,GAAG,GAAGpB,QAAQ,CAACoB,GAAG,EAAEV,MAAM,CAACyB,SAAS,CAAC;MACrCf,GAAG,GAAGnB,YAAY,CAACmB,GAAG,EAAEV,MAAM,CAAC0B,gBAAgB,CAAC;MAEhD,IAAMC,SAAS,GAAGjB,GAAG,CAACkB,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAgB;MACjD,IAAMC,cAAc,GAAG9C,EAAE,CAAC+C,MAAM,CAACH,SAAS,EAAE3B,MAAM,CAAC+B,EAAE,CAAC;MAEtD,OAAOF,cAAc;IACvB,CAAC,CAAC;EACJ,CAAC;EAEYrC,kBAAA,CAAAK,SAAA,CAAAmC,OAAO,GAApB,UAAqBjC,KAAgB;;;;;;YAC5BkC,EAAA,OAAI,CAACnC,YAAY;YAAC,qBAAMZ,UAAU,CAACa,KAAK,CAAC;;YAAhD,sBAAOkC,EAAA,CAAAC,KAAA,KAAI,GAAcC,EAAA,CAAAC,IAAA,EAAuB,EAAC;;;;GAClD;EAEY5C,kBAAA,CAAAK,SAAA,CAAAwC,qBAAqB,GAAlC,UAAmCtC,KAAgB;;;;;;;YAChC,qBAAMb,UAAU,CAACa,KAAK,CAAC;;YAAlCuC,QAAQ,GAAGL,EAAA,CAAAG,IAAA,EAAuB;YAElCG,qBAAqB,GAAGxD,EAAE,CAACmB,IAAI,CACnC;cAAM,OAAAnB,EAAE,CAACyD,OAAO,CAACC,KAAI,CAAC3C,YAAY,CAACwC,QAAQ,CAAC,CAAC;YAAvC,CAAuC,CAC9C;YAE+B,qBAAMI,OAAO,CAACC,GAAG,CAACJ,qBAAqB,CAACK,GAAG,CACzE,UAAAC,CAAC;cAAI,OAAAA,CAAC,CAACC,IAAI,EAAE;YAAR,CAAQ,CACd,CAAC;;YAFIC,uBAAuB,GAAGd,EAAA,CAAAG,IAAA,EAEZ;YAEpBG,qBAAqB,CAACS,OAAO,CAAC,UAAAH,CAAC;cAAI,OAAAA,CAAC,CAACI,OAAO,EAAE;YAAX,CAAW,CAAC;YAE/C,sBAAOX,QAAQ,CAACY,YAAY,GACxBH,uBAAuB,GACvBA,uBAAuB,CAAC,CAAC,CAAC;;;;GAC/B;EAESvD,kBAAA,CAAAK,SAAA,CAAAsD,mBAAmB,GAA7B;IACE,OAAO,wBAAwB;EACjC,CAAC;EAES3D,kBAAA,CAAAK,SAAA,CAAAR,0BAA0B,GAApC,UAAqC+D,SAA4B;IAC/D,OAAO/D,0BAA0B,CAAC+D,SAAS,CAAC;EAC9C,CAAC;EAES5D,kBAAA,CAAAK,SAAA,CAAAT,aAAa,GAAvB,UAAwBiE,OAAqB;IAC3C,OAAOjE,aAAa,CAACiE,OAAO,CAAC;EAC/B,CAAC;EACH,OAAA7D,kBAAC;AAAD,CAAC,CAjFuCR,aAAa","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}