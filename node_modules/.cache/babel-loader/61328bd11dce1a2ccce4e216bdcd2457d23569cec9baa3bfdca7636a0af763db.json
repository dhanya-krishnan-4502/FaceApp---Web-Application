{"ast":null,"code":"import * as tslib_1 from \"tslib\";\nimport * as tf from '@tensorflow/tfjs-core';\nimport { NeuralNetwork, normalize, toNetInput } from 'tfjs-image-recognition-base';\nimport { denseBlock4 } from './denseBlock';\nimport { extractParams } from './extractParams';\nimport { extractParamsFromWeigthMap } from './extractParamsFromWeigthMap';\nvar FaceFeatureExtractor = /** @class */function (_super) {\n  tslib_1.__extends(FaceFeatureExtractor, _super);\n  function FaceFeatureExtractor() {\n    return _super.call(this, 'FaceFeatureExtractor') || this;\n  }\n  FaceFeatureExtractor.prototype.forwardInput = function (input) {\n    var params = this.params;\n    if (!params) {\n      throw new Error('FaceFeatureExtractor - load model before inference');\n    }\n    return tf.tidy(function () {\n      var batchTensor = input.toBatchTensor(112, true);\n      var meanRgb = [122.782, 117.001, 104.298];\n      var normalized = normalize(batchTensor, meanRgb).div(tf.scalar(255));\n      var out = denseBlock4(normalized, params.dense0, true);\n      out = denseBlock4(out, params.dense1);\n      out = denseBlock4(out, params.dense2);\n      out = denseBlock4(out, params.dense3);\n      out = tf.avgPool(out, [7, 7], [2, 2], 'valid');\n      return out;\n    });\n  };\n  FaceFeatureExtractor.prototype.forward = function (input) {\n    return tslib_1.__awaiter(this, void 0, void 0, function () {\n      var _a;\n      return tslib_1.__generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            _a = this.forwardInput;\n            return [4 /*yield*/, toNetInput(input)];\n          case 1:\n            return [2 /*return*/, _a.apply(this, [_b.sent()])];\n        }\n      });\n    });\n  };\n  FaceFeatureExtractor.prototype.getDefaultModelName = function () {\n    return 'face_feature_extractor_model';\n  };\n  FaceFeatureExtractor.prototype.extractParamsFromWeigthMap = function (weightMap) {\n    return extractParamsFromWeigthMap(weightMap);\n  };\n  FaceFeatureExtractor.prototype.extractParams = function (weights) {\n    return extractParams(weights);\n  };\n  return FaceFeatureExtractor;\n}(NeuralNetwork);\nexport { FaceFeatureExtractor };","map":{"version":3,"names":["tf","NeuralNetwork","normalize","toNetInput","denseBlock4","extractParams","extractParamsFromWeigthMap","FaceFeatureExtractor","_super","tslib_1","__extends","call","prototype","forwardInput","input","params","Error","tidy","batchTensor","toBatchTensor","meanRgb","normalized","div","scalar","out","dense0","dense1","dense2","dense3","avgPool","forward","_a","apply","_b","sent","getDefaultModelName","weightMap","weights"],"sources":["/Users/dhanya/node_modules/face-api.js/src/faceFeatureExtractor/FaceFeatureExtractor.ts"],"sourcesContent":["import * as tf from '@tensorflow/tfjs-core';\r\nimport { NetInput, NeuralNetwork, normalize, TNetInput, toNetInput } from 'tfjs-image-recognition-base';\r\n\r\nimport { denseBlock4 } from './denseBlock';\r\nimport { extractParams } from './extractParams';\r\nimport { extractParamsFromWeigthMap } from './extractParamsFromWeigthMap';\r\nimport { FaceFeatureExtractorParams, IFaceFeatureExtractor } from './types';\r\n\r\nexport class FaceFeatureExtractor extends NeuralNetwork<FaceFeatureExtractorParams> implements IFaceFeatureExtractor<FaceFeatureExtractorParams> {\r\n\r\n  constructor() {\r\n    super('FaceFeatureExtractor')\r\n  }\r\n\r\n  public forwardInput(input: NetInput): tf.Tensor4D {\r\n\r\n    const { params } = this\r\n\r\n    if (!params) {\r\n      throw new Error('FaceFeatureExtractor - load model before inference')\r\n    }\r\n\r\n    return tf.tidy(() => {\r\n      const batchTensor = input.toBatchTensor(112, true)\r\n      const meanRgb = [122.782, 117.001, 104.298]\r\n      const normalized = normalize(batchTensor, meanRgb).div(tf.scalar(255)) as tf.Tensor4D\r\n\r\n      let out = denseBlock4(normalized, params.dense0, true)\r\n      out = denseBlock4(out, params.dense1)\r\n      out = denseBlock4(out, params.dense2)\r\n      out = denseBlock4(out, params.dense3)\r\n      out = tf.avgPool(out, [7, 7], [2, 2], 'valid')\r\n\r\n      return out\r\n    })\r\n  }\r\n\r\n  public async forward(input: TNetInput): Promise<tf.Tensor4D> {\r\n    return this.forwardInput(await toNetInput(input))\r\n  }\r\n\r\n  protected getDefaultModelName(): string {\r\n    return 'face_feature_extractor_model'\r\n  }\r\n\r\n  protected extractParamsFromWeigthMap(weightMap: tf.NamedTensorMap) {\r\n    return extractParamsFromWeigthMap(weightMap)\r\n  }\r\n\r\n  protected extractParams(weights: Float32Array) {\r\n    return extractParams(weights)\r\n  }\r\n}"],"mappings":";AAAA,OAAO,KAAKA,EAAE,MAAM,uBAAuB;AAC3C,SAAmBC,aAAa,EAAEC,SAAS,EAAaC,UAAU,QAAQ,6BAA6B;AAEvG,SAASC,WAAW,QAAQ,cAAc;AAC1C,SAASC,aAAa,QAAQ,iBAAiB;AAC/C,SAASC,0BAA0B,QAAQ,8BAA8B;AAGzE,IAAAC,oBAAA,0BAAAC,MAAA;EAA0CC,OAAA,CAAAC,SAAA,CAAAH,oBAAA,EAAAC,MAAA;EAExC,SAAAD,qBAAA;WACEC,MAAA,CAAAG,IAAA,OAAM,sBAAsB,CAAC;EAC/B;EAEOJ,oBAAA,CAAAK,SAAA,CAAAC,YAAY,GAAnB,UAAoBC,KAAe;IAEzB,IAAAC,MAAA,QAAAA,MAAM;IAEd,IAAI,CAACA,MAAM,EAAE;MACX,MAAM,IAAIC,KAAK,CAAC,oDAAoD,CAAC;;IAGvE,OAAOhB,EAAE,CAACiB,IAAI,CAAC;MACb,IAAMC,WAAW,GAAGJ,KAAK,CAACK,aAAa,CAAC,GAAG,EAAE,IAAI,CAAC;MAClD,IAAMC,OAAO,GAAG,CAAC,OAAO,EAAE,OAAO,EAAE,OAAO,CAAC;MAC3C,IAAMC,UAAU,GAAGnB,SAAS,CAACgB,WAAW,EAAEE,OAAO,CAAC,CAACE,GAAG,CAACtB,EAAE,CAACuB,MAAM,CAAC,GAAG,CAAC,CAAgB;MAErF,IAAIC,GAAG,GAAGpB,WAAW,CAACiB,UAAU,EAAEN,MAAM,CAACU,MAAM,EAAE,IAAI,CAAC;MACtDD,GAAG,GAAGpB,WAAW,CAACoB,GAAG,EAAET,MAAM,CAACW,MAAM,CAAC;MACrCF,GAAG,GAAGpB,WAAW,CAACoB,GAAG,EAAET,MAAM,CAACY,MAAM,CAAC;MACrCH,GAAG,GAAGpB,WAAW,CAACoB,GAAG,EAAET,MAAM,CAACa,MAAM,CAAC;MACrCJ,GAAG,GAAGxB,EAAE,CAAC6B,OAAO,CAACL,GAAG,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,OAAO,CAAC;MAE9C,OAAOA,GAAG;IACZ,CAAC,CAAC;EACJ,CAAC;EAEYjB,oBAAA,CAAAK,SAAA,CAAAkB,OAAO,GAApB,UAAqBhB,KAAgB;;;;;;YAC5BiB,EAAA,OAAI,CAAClB,YAAY;YAAC,qBAAMV,UAAU,CAACW,KAAK,CAAC;;YAAhD,sBAAOiB,EAAA,CAAAC,KAAA,KAAI,GAAcC,EAAA,CAAAC,IAAA,EAAuB,EAAC;;;;GAClD;EAES3B,oBAAA,CAAAK,SAAA,CAAAuB,mBAAmB,GAA7B;IACE,OAAO,8BAA8B;EACvC,CAAC;EAES5B,oBAAA,CAAAK,SAAA,CAAAN,0BAA0B,GAApC,UAAqC8B,SAA4B;IAC/D,OAAO9B,0BAA0B,CAAC8B,SAAS,CAAC;EAC9C,CAAC;EAES7B,oBAAA,CAAAK,SAAA,CAAAP,aAAa,GAAvB,UAAwBgC,OAAqB;IAC3C,OAAOhC,aAAa,CAACgC,OAAO,CAAC;EAC/B,CAAC;EACH,OAAA9B,oBAAC;AAAD,CAAC,CA5CyCN,aAAa","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}