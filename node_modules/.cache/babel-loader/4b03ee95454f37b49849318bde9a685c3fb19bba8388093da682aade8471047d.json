{"ast":null,"code":"import * as tslib_1 from \"tslib\";\nimport { TfjsImageRecognitionBase } from 'tfjs-image-recognition-base';\nfunction extractorsFactory(weightMap, paramMappings) {\n  var extractWeightEntry = TfjsImageRecognitionBase.extractWeightEntryFactory(weightMap, paramMappings);\n  function extractConvParams(prefix) {\n    var filters = extractWeightEntry(prefix + \"/weights\", 4, prefix + \"/filters\");\n    var bias = extractWeightEntry(prefix + \"/bias\", 1);\n    return {\n      filters: filters,\n      bias: bias\n    };\n  }\n  function extractFCParams(prefix) {\n    var weights = extractWeightEntry(prefix + \"/weights\", 2);\n    var bias = extractWeightEntry(prefix + \"/bias\", 1);\n    return {\n      weights: weights,\n      bias: bias\n    };\n  }\n  function extractPReluParams(paramPath) {\n    return extractWeightEntry(paramPath, 1);\n  }\n  function extractSharedParams(prefix) {\n    var conv1 = extractConvParams(prefix + \"/conv1\");\n    var prelu1_alpha = extractPReluParams(prefix + \"/prelu1_alpha\");\n    var conv2 = extractConvParams(prefix + \"/conv2\");\n    var prelu2_alpha = extractPReluParams(prefix + \"/prelu2_alpha\");\n    var conv3 = extractConvParams(prefix + \"/conv3\");\n    var prelu3_alpha = extractPReluParams(prefix + \"/prelu3_alpha\");\n    return {\n      conv1: conv1,\n      prelu1_alpha: prelu1_alpha,\n      conv2: conv2,\n      prelu2_alpha: prelu2_alpha,\n      conv3: conv3,\n      prelu3_alpha: prelu3_alpha\n    };\n  }\n  function extractPNetParams() {\n    var sharedParams = extractSharedParams('pnet');\n    var conv4_1 = extractConvParams('pnet/conv4_1');\n    var conv4_2 = extractConvParams('pnet/conv4_2');\n    return tslib_1.__assign({}, sharedParams, {\n      conv4_1: conv4_1,\n      conv4_2: conv4_2\n    });\n  }\n  function extractRNetParams() {\n    var sharedParams = extractSharedParams('rnet');\n    var fc1 = extractFCParams('rnet/fc1');\n    var prelu4_alpha = extractPReluParams('rnet/prelu4_alpha');\n    var fc2_1 = extractFCParams('rnet/fc2_1');\n    var fc2_2 = extractFCParams('rnet/fc2_2');\n    return tslib_1.__assign({}, sharedParams, {\n      fc1: fc1,\n      prelu4_alpha: prelu4_alpha,\n      fc2_1: fc2_1,\n      fc2_2: fc2_2\n    });\n  }\n  function extractONetParams() {\n    var sharedParams = extractSharedParams('onet');\n    var conv4 = extractConvParams('onet/conv4');\n    var prelu4_alpha = extractPReluParams('onet/prelu4_alpha');\n    var fc1 = extractFCParams('onet/fc1');\n    var prelu5_alpha = extractPReluParams('onet/prelu5_alpha');\n    var fc2_1 = extractFCParams('onet/fc2_1');\n    var fc2_2 = extractFCParams('onet/fc2_2');\n    var fc2_3 = extractFCParams('onet/fc2_3');\n    return tslib_1.__assign({}, sharedParams, {\n      conv4: conv4,\n      prelu4_alpha: prelu4_alpha,\n      fc1: fc1,\n      prelu5_alpha: prelu5_alpha,\n      fc2_1: fc2_1,\n      fc2_2: fc2_2,\n      fc2_3: fc2_3\n    });\n  }\n  return {\n    extractPNetParams: extractPNetParams,\n    extractRNetParams: extractRNetParams,\n    extractONetParams: extractONetParams\n  };\n}\nexport function extractParamsFromWeigthMap(weightMap) {\n  var paramMappings = [];\n  var _a = extractorsFactory(weightMap, paramMappings),\n    extractPNetParams = _a.extractPNetParams,\n    extractRNetParams = _a.extractRNetParams,\n    extractONetParams = _a.extractONetParams;\n  var pnet = extractPNetParams();\n  var rnet = extractRNetParams();\n  var onet = extractONetParams();\n  TfjsImageRecognitionBase.disposeUnusedWeightTensors(weightMap, paramMappings);\n  return {\n    params: {\n      pnet: pnet,\n      rnet: rnet,\n      onet: onet\n    },\n    paramMappings: paramMappings\n  };\n}","map":{"version":3,"names":["TfjsImageRecognitionBase","extractorsFactory","weightMap","paramMappings","extractWeightEntry","extractWeightEntryFactory","extractConvParams","prefix","filters","bias","extractFCParams","weights","extractPReluParams","paramPath","extractSharedParams","conv1","prelu1_alpha","conv2","prelu2_alpha","conv3","prelu3_alpha","extractPNetParams","sharedParams","conv4_1","conv4_2","tslib_1","__assign","extractRNetParams","fc1","prelu4_alpha","fc2_1","fc2_2","extractONetParams","conv4","prelu5_alpha","fc2_3","extractParamsFromWeigthMap","_a","pnet","rnet","onet","disposeUnusedWeightTensors","params"],"sources":["/Users/dhanya/node_modules/face-api.js/src/mtcnn/extractParamsFromWeigthMap.ts"],"sourcesContent":["import * as tf from '@tensorflow/tfjs-core';\r\nimport { TfjsImageRecognitionBase } from 'tfjs-image-recognition-base';\r\n\r\nimport { NetParams, ONetParams, PNetParams, RNetParams, SharedParams } from './types';\r\n\r\nfunction extractorsFactory(weightMap: any, paramMappings: TfjsImageRecognitionBase.ParamMapping[]) {\r\n\r\n  const extractWeightEntry = TfjsImageRecognitionBase.extractWeightEntryFactory(weightMap, paramMappings)\r\n\r\n  function extractConvParams(prefix: string): TfjsImageRecognitionBase.ConvParams {\r\n    const filters = extractWeightEntry<tf.Tensor4D>(`${prefix}/weights`, 4, `${prefix}/filters`)\r\n    const bias = extractWeightEntry<tf.Tensor1D>(`${prefix}/bias`, 1)\r\n\r\n    return { filters, bias }\r\n  }\r\n\r\n  function extractFCParams(prefix: string): TfjsImageRecognitionBase.FCParams {\r\n    const weights = extractWeightEntry<tf.Tensor2D>(`${prefix}/weights`, 2)\r\n    const bias = extractWeightEntry<tf.Tensor1D>(`${prefix}/bias`, 1)\r\n\r\n    return { weights, bias }\r\n  }\r\n\r\n  function extractPReluParams(paramPath: string): tf.Tensor1D {\r\n    return extractWeightEntry<tf.Tensor1D>(paramPath, 1)\r\n  }\r\n\r\n  function extractSharedParams(prefix: string): SharedParams {\r\n\r\n    const conv1 = extractConvParams(`${prefix}/conv1`)\r\n    const prelu1_alpha = extractPReluParams(`${prefix}/prelu1_alpha`)\r\n    const conv2 = extractConvParams(`${prefix}/conv2`)\r\n    const prelu2_alpha = extractPReluParams(`${prefix}/prelu2_alpha`)\r\n    const conv3 = extractConvParams(`${prefix}/conv3`)\r\n    const prelu3_alpha = extractPReluParams(`${prefix}/prelu3_alpha`)\r\n\r\n    return { conv1, prelu1_alpha, conv2, prelu2_alpha, conv3, prelu3_alpha }\r\n  }\r\n\r\n  function extractPNetParams(): PNetParams {\r\n\r\n    const sharedParams = extractSharedParams('pnet')\r\n    const conv4_1 = extractConvParams('pnet/conv4_1')\r\n    const conv4_2 = extractConvParams('pnet/conv4_2')\r\n\r\n    return { ...sharedParams, conv4_1, conv4_2 }\r\n  }\r\n\r\n  function extractRNetParams(): RNetParams {\r\n\r\n    const sharedParams = extractSharedParams('rnet')\r\n    const fc1 = extractFCParams('rnet/fc1')\r\n    const prelu4_alpha = extractPReluParams('rnet/prelu4_alpha')\r\n    const fc2_1 = extractFCParams('rnet/fc2_1')\r\n    const fc2_2 = extractFCParams('rnet/fc2_2')\r\n\r\n    return { ...sharedParams, fc1, prelu4_alpha, fc2_1, fc2_2 }\r\n  }\r\n\r\n  function extractONetParams(): ONetParams {\r\n\r\n    const sharedParams = extractSharedParams('onet')\r\n    const conv4 = extractConvParams('onet/conv4')\r\n    const prelu4_alpha = extractPReluParams('onet/prelu4_alpha')\r\n    const fc1 = extractFCParams('onet/fc1')\r\n    const prelu5_alpha = extractPReluParams('onet/prelu5_alpha')\r\n    const fc2_1 = extractFCParams('onet/fc2_1')\r\n    const fc2_2 = extractFCParams('onet/fc2_2')\r\n    const fc2_3 = extractFCParams('onet/fc2_3')\r\n\r\n    return { ...sharedParams, conv4, prelu4_alpha, fc1, prelu5_alpha, fc2_1, fc2_2, fc2_3 }\r\n  }\r\n\r\n  return {\r\n    extractPNetParams,\r\n    extractRNetParams,\r\n    extractONetParams\r\n  }\r\n\r\n}\r\n\r\nexport function extractParamsFromWeigthMap(\r\n  weightMap: tf.NamedTensorMap\r\n): { params: NetParams, paramMappings: TfjsImageRecognitionBase.ParamMapping[] } {\r\n\r\n  const paramMappings: TfjsImageRecognitionBase.ParamMapping[] = []\r\n\r\n  const {\r\n    extractPNetParams,\r\n    extractRNetParams,\r\n    extractONetParams\r\n  } = extractorsFactory(weightMap, paramMappings)\r\n\r\n  const pnet = extractPNetParams()\r\n  const rnet = extractRNetParams()\r\n  const onet = extractONetParams()\r\n\r\n  TfjsImageRecognitionBase.disposeUnusedWeightTensors(weightMap, paramMappings)\r\n\r\n  return { params: { pnet, rnet, onet }, paramMappings }\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}