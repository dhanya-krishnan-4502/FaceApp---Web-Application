{"ast":null,"code":"export var FACE_EXPRESSION_LABELS = ['neutral', 'happy', 'sad', 'angry', 'fearful', 'disgusted', 'surprised'];\nvar FaceExpressions = /** @class */function () {\n  function FaceExpressions(probabilities) {\n    var _this = this;\n    if (probabilities.length !== 7) {\n      throw new Error(\"FaceExpressions.constructor - expected probabilities.length to be 7, have: \" + probabilities.length);\n    }\n    FACE_EXPRESSION_LABELS.forEach(function (expression, idx) {\n      _this[expression] = probabilities[idx];\n    });\n  }\n  FaceExpressions.prototype.asSortedArray = function () {\n    var _this = this;\n    return FACE_EXPRESSION_LABELS.map(function (expression) {\n      return {\n        expression: expression,\n        probability: _this[expression]\n      };\n    }).sort(function (e0, e1) {\n      return e1.probability - e0.probability;\n    });\n  };\n  return FaceExpressions;\n}();\nexport { FaceExpressions };","map":{"version":3,"names":["FACE_EXPRESSION_LABELS","FaceExpressions","probabilities","_this","length","Error","forEach","expression","idx","prototype","asSortedArray","map","probability","sort","e0","e1"],"sources":["/Users/dhanya/node_modules/face-api.js/src/faceExpressionNet/FaceExpressions.ts"],"sourcesContent":["export const FACE_EXPRESSION_LABELS = ['neutral', 'happy', 'sad', 'angry', 'fearful', 'disgusted', 'surprised']\r\n\r\nexport class FaceExpressions {\r\n  public neutral: number\r\n  public happy: number\r\n  public sad: number\r\n  public angry: number\r\n  public fearful: number\r\n  public disgusted: number\r\n  public surprised: number\r\n\r\n  constructor(probabilities: number[] | Float32Array) {\r\n    if (probabilities.length !== 7) {\r\n      throw new Error(`FaceExpressions.constructor - expected probabilities.length to be 7, have: ${probabilities.length}`)\r\n    }\r\n\r\n    FACE_EXPRESSION_LABELS.forEach((expression, idx) => {\r\n      this[expression] = probabilities[idx]\r\n    })\r\n  }\r\n\r\n  asSortedArray() {\r\n    return FACE_EXPRESSION_LABELS\r\n      .map(expression => ({ expression, probability: this[expression] as number }))\r\n      .sort((e0, e1) => e1.probability - e0.probability)\r\n  }\r\n}"],"mappings":"AAAA,OAAO,IAAMA,sBAAsB,GAAG,CAAC,SAAS,EAAE,OAAO,EAAE,KAAK,EAAE,OAAO,EAAE,SAAS,EAAE,WAAW,EAAE,WAAW,CAAC;AAE/G,IAAAC,eAAA;EASE,SAAAA,gBAAYC,aAAsC;IAAlD,IAAAC,KAAA;IACE,IAAID,aAAa,CAACE,MAAM,KAAK,CAAC,EAAE;MAC9B,MAAM,IAAIC,KAAK,CAAC,gFAA8EH,aAAa,CAACE,MAAQ,CAAC;;IAGvHJ,sBAAsB,CAACM,OAAO,CAAC,UAACC,UAAU,EAAEC,GAAG;MAC7CL,KAAI,CAACI,UAAU,CAAC,GAAGL,aAAa,CAACM,GAAG,CAAC;IACvC,CAAC,CAAC;EACJ;EAEAP,eAAA,CAAAQ,SAAA,CAAAC,aAAa,GAAb;IAAA,IAAAP,KAAA;IACE,OAAOH,sBAAsB,CAC1BW,GAAG,CAAC,UAAAJ,UAAU;MAAI,OAAC;QAAEA,UAAU,EAAAA,UAAA;QAAEK,WAAW,EAAET,KAAI,CAACI,UAAU;MAAW,CAAE;IAAxD,CAAyD,CAAC,CAC5EM,IAAI,CAAC,UAACC,EAAE,EAAEC,EAAE;MAAK,OAAAA,EAAE,CAACH,WAAW,GAAGE,EAAE,CAACF,WAAW;IAA/B,CAA+B,CAAC;EACtD,CAAC;EACH,OAAAX,eAAC;AAAD,CAAC,CAxBD","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}