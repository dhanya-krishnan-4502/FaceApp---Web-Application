{"ast":null,"code":"import { TfjsImageRecognitionBase, range } from 'tfjs-image-recognition-base';\nimport { loadConvParamsFactory } from '../common/loadConvParamsFactory';\nfunction loadParamsFactory(weightMap, paramMappings) {\n  var extractWeightEntry = TfjsImageRecognitionBase.extractWeightEntryFactory(weightMap, paramMappings);\n  var extractConvParams = loadConvParamsFactory(extractWeightEntry);\n  var extractSeparableConvParams = TfjsImageRecognitionBase.loadSeparableConvParamsFactory(extractWeightEntry);\n  function extractReductionBlockParams(mappedPrefix) {\n    var separable_conv0 = extractSeparableConvParams(mappedPrefix + \"/separable_conv0\");\n    var separable_conv1 = extractSeparableConvParams(mappedPrefix + \"/separable_conv1\");\n    var expansion_conv = extractConvParams(mappedPrefix + \"/expansion_conv\");\n    return {\n      separable_conv0: separable_conv0,\n      separable_conv1: separable_conv1,\n      expansion_conv: expansion_conv\n    };\n  }\n  function extractMainBlockParams(mappedPrefix) {\n    var separable_conv0 = extractSeparableConvParams(mappedPrefix + \"/separable_conv0\");\n    var separable_conv1 = extractSeparableConvParams(mappedPrefix + \"/separable_conv1\");\n    var separable_conv2 = extractSeparableConvParams(mappedPrefix + \"/separable_conv2\");\n    return {\n      separable_conv0: separable_conv0,\n      separable_conv1: separable_conv1,\n      separable_conv2: separable_conv2\n    };\n  }\n  return {\n    extractConvParams: extractConvParams,\n    extractSeparableConvParams: extractSeparableConvParams,\n    extractReductionBlockParams: extractReductionBlockParams,\n    extractMainBlockParams: extractMainBlockParams\n  };\n}\nexport function extractParamsFromWeigthMap(weightMap, numMainBlocks) {\n  var paramMappings = [];\n  var _a = loadParamsFactory(weightMap, paramMappings),\n    extractConvParams = _a.extractConvParams,\n    extractSeparableConvParams = _a.extractSeparableConvParams,\n    extractReductionBlockParams = _a.extractReductionBlockParams,\n    extractMainBlockParams = _a.extractMainBlockParams;\n  var entry_flow_conv_in = extractConvParams('entry_flow/conv_in');\n  var entry_flow_reduction_block_0 = extractReductionBlockParams('entry_flow/reduction_block_0');\n  var entry_flow_reduction_block_1 = extractReductionBlockParams('entry_flow/reduction_block_1');\n  var entry_flow = {\n    conv_in: entry_flow_conv_in,\n    reduction_block_0: entry_flow_reduction_block_0,\n    reduction_block_1: entry_flow_reduction_block_1\n  };\n  var middle_flow = {};\n  range(numMainBlocks, 0, 1).forEach(function (idx) {\n    middle_flow[\"main_block_\" + idx] = extractMainBlockParams(\"middle_flow/main_block_\" + idx);\n  });\n  var exit_flow_reduction_block = extractReductionBlockParams('exit_flow/reduction_block');\n  var exit_flow_separable_conv = extractSeparableConvParams('exit_flow/separable_conv');\n  var exit_flow = {\n    reduction_block: exit_flow_reduction_block,\n    separable_conv: exit_flow_separable_conv\n  };\n  TfjsImageRecognitionBase.disposeUnusedWeightTensors(weightMap, paramMappings);\n  return {\n    params: {\n      entry_flow: entry_flow,\n      middle_flow: middle_flow,\n      exit_flow: exit_flow\n    },\n    paramMappings: paramMappings\n  };\n}","map":{"version":3,"names":["TfjsImageRecognitionBase","range","loadConvParamsFactory","loadParamsFactory","weightMap","paramMappings","extractWeightEntry","extractWeightEntryFactory","extractConvParams","extractSeparableConvParams","loadSeparableConvParamsFactory","extractReductionBlockParams","mappedPrefix","separable_conv0","separable_conv1","expansion_conv","extractMainBlockParams","separable_conv2","extractParamsFromWeigthMap","numMainBlocks","_a","entry_flow_conv_in","entry_flow_reduction_block_0","entry_flow_reduction_block_1","entry_flow","conv_in","reduction_block_0","reduction_block_1","middle_flow","forEach","idx","exit_flow_reduction_block","exit_flow_separable_conv","exit_flow","reduction_block","separable_conv","disposeUnusedWeightTensors","params"],"sources":["/Users/dhanya/node_modules/face-api.js/src/xception/extractParamsFromWeigthMap.ts"],"sourcesContent":["import * as tf from '@tensorflow/tfjs-core';\r\nimport { TfjsImageRecognitionBase, range } from 'tfjs-image-recognition-base';\r\n\r\nimport { loadConvParamsFactory } from '../common/loadConvParamsFactory';\r\nimport { MainBlockParams, ReductionBlockParams, TinyXceptionParams } from './types';\r\n\r\nfunction loadParamsFactory(weightMap: any, paramMappings: TfjsImageRecognitionBase.ParamMapping[]) {\r\n\r\n  const extractWeightEntry = TfjsImageRecognitionBase.extractWeightEntryFactory(weightMap, paramMappings)\r\n\r\n  const extractConvParams = loadConvParamsFactory(extractWeightEntry)\r\n  const extractSeparableConvParams = TfjsImageRecognitionBase.loadSeparableConvParamsFactory(extractWeightEntry)\r\n\r\n  function extractReductionBlockParams(mappedPrefix: string): ReductionBlockParams {\r\n\r\n    const separable_conv0 = extractSeparableConvParams(`${mappedPrefix}/separable_conv0`)\r\n    const separable_conv1 = extractSeparableConvParams(`${mappedPrefix}/separable_conv1`)\r\n    const expansion_conv = extractConvParams(`${mappedPrefix}/expansion_conv`)\r\n\r\n    return { separable_conv0, separable_conv1, expansion_conv }\r\n  }\r\n\r\n  function extractMainBlockParams(mappedPrefix: string): MainBlockParams {\r\n\r\n    const separable_conv0 = extractSeparableConvParams(`${mappedPrefix}/separable_conv0`)\r\n    const separable_conv1 = extractSeparableConvParams(`${mappedPrefix}/separable_conv1`)\r\n    const separable_conv2 = extractSeparableConvParams(`${mappedPrefix}/separable_conv2`)\r\n\r\n    return { separable_conv0, separable_conv1, separable_conv2 }\r\n  }\r\n\r\n  return {\r\n    extractConvParams,\r\n    extractSeparableConvParams,\r\n    extractReductionBlockParams,\r\n    extractMainBlockParams\r\n  }\r\n}\r\n\r\nexport function extractParamsFromWeigthMap(\r\n  weightMap: tf.NamedTensorMap,\r\n  numMainBlocks: number\r\n): { params: TinyXceptionParams, paramMappings: TfjsImageRecognitionBase.ParamMapping[] } {\r\n\r\n  const paramMappings: TfjsImageRecognitionBase.ParamMapping[] = []\r\n\r\n  const {\r\n    extractConvParams,\r\n    extractSeparableConvParams,\r\n    extractReductionBlockParams,\r\n    extractMainBlockParams\r\n  } = loadParamsFactory(weightMap, paramMappings)\r\n\r\n  const entry_flow_conv_in = extractConvParams('entry_flow/conv_in')\r\n  const entry_flow_reduction_block_0 = extractReductionBlockParams('entry_flow/reduction_block_0')\r\n  const entry_flow_reduction_block_1 = extractReductionBlockParams('entry_flow/reduction_block_1')\r\n\r\n  const entry_flow = {\r\n    conv_in: entry_flow_conv_in,\r\n    reduction_block_0: entry_flow_reduction_block_0,\r\n    reduction_block_1: entry_flow_reduction_block_1\r\n  }\r\n\r\n  const middle_flow = {}\r\n  range(numMainBlocks, 0, 1).forEach((idx) => {\r\n    middle_flow[`main_block_${idx}`] = extractMainBlockParams(`middle_flow/main_block_${idx}`)\r\n  })\r\n\r\n  const exit_flow_reduction_block = extractReductionBlockParams('exit_flow/reduction_block')\r\n  const exit_flow_separable_conv = extractSeparableConvParams('exit_flow/separable_conv')\r\n\r\n  const exit_flow = {\r\n    reduction_block: exit_flow_reduction_block,\r\n    separable_conv: exit_flow_separable_conv\r\n  }\r\n\r\n  TfjsImageRecognitionBase.disposeUnusedWeightTensors(weightMap, paramMappings)\r\n\r\n  return { params: { entry_flow, middle_flow, exit_flow }, paramMappings }\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}