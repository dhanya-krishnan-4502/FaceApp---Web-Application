{"ast":null,"code":"import * as tslib_1 from \"tslib\";\nimport * as tf from '@tensorflow/tfjs-core';\nimport { TfjsImageRecognitionBase } from 'tfjs-image-recognition-base';\nfunction extractorsFactory(extractWeights, paramMappings) {\n  var extractConvParams = TfjsImageRecognitionBase.extractConvParamsFactory(extractWeights, paramMappings);\n  var extractFCParams = TfjsImageRecognitionBase.extractFCParamsFactory(extractWeights, paramMappings);\n  function extractPReluParams(size, paramPath) {\n    var alpha = tf.tensor1d(extractWeights(size));\n    paramMappings.push({\n      paramPath: paramPath\n    });\n    return alpha;\n  }\n  function extractSharedParams(numFilters, mappedPrefix, isRnet) {\n    if (isRnet === void 0) {\n      isRnet = false;\n    }\n    var conv1 = extractConvParams(numFilters[0], numFilters[1], 3, mappedPrefix + \"/conv1\");\n    var prelu1_alpha = extractPReluParams(numFilters[1], mappedPrefix + \"/prelu1_alpha\");\n    var conv2 = extractConvParams(numFilters[1], numFilters[2], 3, mappedPrefix + \"/conv2\");\n    var prelu2_alpha = extractPReluParams(numFilters[2], mappedPrefix + \"/prelu2_alpha\");\n    var conv3 = extractConvParams(numFilters[2], numFilters[3], isRnet ? 2 : 3, mappedPrefix + \"/conv3\");\n    var prelu3_alpha = extractPReluParams(numFilters[3], mappedPrefix + \"/prelu3_alpha\");\n    return {\n      conv1: conv1,\n      prelu1_alpha: prelu1_alpha,\n      conv2: conv2,\n      prelu2_alpha: prelu2_alpha,\n      conv3: conv3,\n      prelu3_alpha: prelu3_alpha\n    };\n  }\n  function extractPNetParams() {\n    var sharedParams = extractSharedParams([3, 10, 16, 32], 'pnet');\n    var conv4_1 = extractConvParams(32, 2, 1, 'pnet/conv4_1');\n    var conv4_2 = extractConvParams(32, 4, 1, 'pnet/conv4_2');\n    return tslib_1.__assign({}, sharedParams, {\n      conv4_1: conv4_1,\n      conv4_2: conv4_2\n    });\n  }\n  function extractRNetParams() {\n    var sharedParams = extractSharedParams([3, 28, 48, 64], 'rnet', true);\n    var fc1 = extractFCParams(576, 128, 'rnet/fc1');\n    var prelu4_alpha = extractPReluParams(128, 'rnet/prelu4_alpha');\n    var fc2_1 = extractFCParams(128, 2, 'rnet/fc2_1');\n    var fc2_2 = extractFCParams(128, 4, 'rnet/fc2_2');\n    return tslib_1.__assign({}, sharedParams, {\n      fc1: fc1,\n      prelu4_alpha: prelu4_alpha,\n      fc2_1: fc2_1,\n      fc2_2: fc2_2\n    });\n  }\n  function extractONetParams() {\n    var sharedParams = extractSharedParams([3, 32, 64, 64], 'onet');\n    var conv4 = extractConvParams(64, 128, 2, 'onet/conv4');\n    var prelu4_alpha = extractPReluParams(128, 'onet/prelu4_alpha');\n    var fc1 = extractFCParams(1152, 256, 'onet/fc1');\n    var prelu5_alpha = extractPReluParams(256, 'onet/prelu5_alpha');\n    var fc2_1 = extractFCParams(256, 2, 'onet/fc2_1');\n    var fc2_2 = extractFCParams(256, 4, 'onet/fc2_2');\n    var fc2_3 = extractFCParams(256, 10, 'onet/fc2_3');\n    return tslib_1.__assign({}, sharedParams, {\n      conv4: conv4,\n      prelu4_alpha: prelu4_alpha,\n      fc1: fc1,\n      prelu5_alpha: prelu5_alpha,\n      fc2_1: fc2_1,\n      fc2_2: fc2_2,\n      fc2_3: fc2_3\n    });\n  }\n  return {\n    extractPNetParams: extractPNetParams,\n    extractRNetParams: extractRNetParams,\n    extractONetParams: extractONetParams\n  };\n}\nexport function extractParams(weights) {\n  var _a = TfjsImageRecognitionBase.extractWeightsFactory(weights),\n    extractWeights = _a.extractWeights,\n    getRemainingWeights = _a.getRemainingWeights;\n  var paramMappings = [];\n  var _b = extractorsFactory(extractWeights, paramMappings),\n    extractPNetParams = _b.extractPNetParams,\n    extractRNetParams = _b.extractRNetParams,\n    extractONetParams = _b.extractONetParams;\n  var pnet = extractPNetParams();\n  var rnet = extractRNetParams();\n  var onet = extractONetParams();\n  if (getRemainingWeights().length !== 0) {\n    throw new Error(\"weights remaing after extract: \" + getRemainingWeights().length);\n  }\n  return {\n    params: {\n      pnet: pnet,\n      rnet: rnet,\n      onet: onet\n    },\n    paramMappings: paramMappings\n  };\n}","map":{"version":3,"names":["tf","TfjsImageRecognitionBase","extractorsFactory","extractWeights","paramMappings","extractConvParams","extractConvParamsFactory","extractFCParams","extractFCParamsFactory","extractPReluParams","size","paramPath","alpha","tensor1d","push","extractSharedParams","numFilters","mappedPrefix","isRnet","conv1","prelu1_alpha","conv2","prelu2_alpha","conv3","prelu3_alpha","extractPNetParams","sharedParams","conv4_1","conv4_2","tslib_1","__assign","extractRNetParams","fc1","prelu4_alpha","fc2_1","fc2_2","extractONetParams","conv4","prelu5_alpha","fc2_3","extractParams","weights","_a","extractWeightsFactory","getRemainingWeights","_b","pnet","rnet","onet","length","Error","params"],"sources":["/Users/dhanya/node_modules/face-api.js/src/mtcnn/extractParams.ts"],"sourcesContent":["import * as tf from '@tensorflow/tfjs-core';\r\nimport { TfjsImageRecognitionBase } from 'tfjs-image-recognition-base';\r\n\r\nimport { NetParams, ONetParams, PNetParams, RNetParams, SharedParams } from './types';\r\n\r\nfunction extractorsFactory(extractWeights: TfjsImageRecognitionBase.ExtractWeightsFunction, paramMappings: TfjsImageRecognitionBase.ParamMapping[]) {\r\n\r\n  const extractConvParams = TfjsImageRecognitionBase.extractConvParamsFactory(extractWeights, paramMappings)\r\n  const extractFCParams = TfjsImageRecognitionBase.extractFCParamsFactory(extractWeights, paramMappings)\r\n\r\n  function extractPReluParams(size: number, paramPath: string): tf.Tensor1D {\r\n    const alpha = tf.tensor1d(extractWeights(size))\r\n    paramMappings.push({ paramPath })\r\n    return alpha\r\n  }\r\n\r\n  function extractSharedParams(numFilters: number[], mappedPrefix: string, isRnet: boolean = false): SharedParams {\r\n\r\n    const conv1 = extractConvParams(numFilters[0], numFilters[1], 3, `${mappedPrefix}/conv1`)\r\n    const prelu1_alpha = extractPReluParams(numFilters[1], `${mappedPrefix}/prelu1_alpha`)\r\n    const conv2 = extractConvParams(numFilters[1], numFilters[2], 3, `${mappedPrefix}/conv2`)\r\n    const prelu2_alpha = extractPReluParams(numFilters[2], `${mappedPrefix}/prelu2_alpha`)\r\n    const conv3 = extractConvParams(numFilters[2], numFilters[3], isRnet ? 2 : 3, `${mappedPrefix}/conv3`)\r\n    const prelu3_alpha = extractPReluParams(numFilters[3], `${mappedPrefix}/prelu3_alpha`)\r\n\r\n    return { conv1, prelu1_alpha, conv2, prelu2_alpha, conv3, prelu3_alpha }\r\n  }\r\n\r\n  function extractPNetParams(): PNetParams {\r\n\r\n    const sharedParams = extractSharedParams([3, 10, 16, 32], 'pnet')\r\n    const conv4_1 = extractConvParams(32, 2, 1, 'pnet/conv4_1')\r\n    const conv4_2 = extractConvParams(32, 4, 1, 'pnet/conv4_2')\r\n\r\n    return { ...sharedParams, conv4_1, conv4_2 }\r\n  }\r\n\r\n  function extractRNetParams(): RNetParams {\r\n\r\n    const sharedParams = extractSharedParams([3, 28, 48, 64], 'rnet', true)\r\n    const fc1 = extractFCParams(576, 128, 'rnet/fc1')\r\n    const prelu4_alpha = extractPReluParams(128, 'rnet/prelu4_alpha')\r\n    const fc2_1 = extractFCParams(128, 2, 'rnet/fc2_1')\r\n    const fc2_2 = extractFCParams(128, 4, 'rnet/fc2_2')\r\n\r\n    return { ...sharedParams, fc1, prelu4_alpha, fc2_1, fc2_2 }\r\n  }\r\n\r\n  function extractONetParams(): ONetParams {\r\n\r\n    const sharedParams = extractSharedParams([3, 32, 64, 64], 'onet')\r\n    const conv4 = extractConvParams(64, 128, 2, 'onet/conv4')\r\n    const prelu4_alpha = extractPReluParams(128, 'onet/prelu4_alpha')\r\n    const fc1 = extractFCParams(1152, 256, 'onet/fc1')\r\n    const prelu5_alpha = extractPReluParams(256, 'onet/prelu5_alpha')\r\n    const fc2_1 = extractFCParams(256, 2, 'onet/fc2_1')\r\n    const fc2_2 = extractFCParams(256, 4, 'onet/fc2_2')\r\n    const fc2_3 = extractFCParams(256, 10, 'onet/fc2_3')\r\n\r\n    return { ...sharedParams, conv4, prelu4_alpha, fc1, prelu5_alpha, fc2_1, fc2_2, fc2_3 }\r\n  }\r\n\r\n  return {\r\n    extractPNetParams,\r\n    extractRNetParams,\r\n    extractONetParams\r\n  }\r\n\r\n}\r\n\r\nexport function extractParams(weights: Float32Array): { params: NetParams, paramMappings: TfjsImageRecognitionBase.ParamMapping[] } {\r\n\r\n  const {\r\n    extractWeights,\r\n    getRemainingWeights\r\n  } = TfjsImageRecognitionBase.extractWeightsFactory(weights)\r\n\r\n  const paramMappings: TfjsImageRecognitionBase.ParamMapping[] = []\r\n\r\n  const {\r\n    extractPNetParams,\r\n    extractRNetParams,\r\n    extractONetParams\r\n  } = extractorsFactory(extractWeights, paramMappings)\r\n\r\n  const pnet = extractPNetParams()\r\n  const rnet = extractRNetParams()\r\n  const onet = extractONetParams()\r\n\r\n  if (getRemainingWeights().length !== 0) {\r\n    throw new Error(`weights remaing after extract: ${getRemainingWeights().length}`)\r\n  }\r\n\r\n  return { params: { pnet, rnet, onet }, paramMappings }\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}