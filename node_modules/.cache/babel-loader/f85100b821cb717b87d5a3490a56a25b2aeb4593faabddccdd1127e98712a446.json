{"ast":null,"code":"import * as tslib_1 from \"tslib\";\nimport * as tf from '@tensorflow/tfjs-core';\nimport { extractFaces, extractFaceTensors } from '../dom';\nimport { isWithFaceLandmarks } from '../factories/WithFaceLandmarks';\nexport function extractAllFacesAndComputeResults(parentResults, input, computeResults, extractedFaces, getRectForAlignment) {\n  if (getRectForAlignment === void 0) {\n    getRectForAlignment = function (_a) {\n      var alignedRect = _a.alignedRect;\n      return alignedRect;\n    };\n  }\n  return tslib_1.__awaiter(this, void 0, void 0, function () {\n    var faceBoxes, faces, _a, _b, results;\n    return tslib_1.__generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          faceBoxes = parentResults.map(function (parentResult) {\n            return isWithFaceLandmarks(parentResult) ? getRectForAlignment(parentResult) : parentResult.detection;\n          });\n          _a = extractedFaces;\n          if (_a) return [3 /*break*/, 5];\n          if (!(input instanceof tf.Tensor)) return [3 /*break*/, 2];\n          return [4 /*yield*/, extractFaceTensors(input, faceBoxes)];\n        case 1:\n          _b = _c.sent();\n          return [3 /*break*/, 4];\n        case 2:\n          return [4 /*yield*/, extractFaces(input, faceBoxes)];\n        case 3:\n          _b = _c.sent();\n          _c.label = 4;\n        case 4:\n          _a = _b;\n          _c.label = 5;\n        case 5:\n          faces = _a;\n          return [4 /*yield*/, computeResults(faces)];\n        case 6:\n          results = _c.sent();\n          faces.forEach(function (f) {\n            return f instanceof tf.Tensor && f.dispose();\n          });\n          return [2 /*return*/, results];\n      }\n    });\n  });\n}\nexport function extractSingleFaceAndComputeResult(parentResult, input, computeResult, extractedFaces, getRectForAlignment) {\n  return tslib_1.__awaiter(this, void 0, void 0, function () {\n    var _this = this;\n    return tslib_1.__generator(this, function (_a) {\n      return [2 /*return*/, extractAllFacesAndComputeResults([parentResult], input, function (faces) {\n        return tslib_1.__awaiter(_this, void 0, void 0, function () {\n          return tslib_1.__generator(this, function (_a) {\n            return [2 /*return*/, computeResult(faces[0])];\n          });\n        });\n      }, extractedFaces, getRectForAlignment)];\n    });\n  });\n}","map":{"version":3,"names":["tf","extractFaces","extractFaceTensors","isWithFaceLandmarks","extractAllFacesAndComputeResults","parentResults","input","computeResults","extractedFaces","getRectForAlignment","_a","alignedRect","faceBoxes","map","parentResult","detection","Tensor","_b","_c","sent","faces","results","forEach","f","dispose","extractSingleFaceAndComputeResult","computeResult","tslib_1","__awaiter","_this","__generator"],"sources":["/Users/dhanya/node_modules/face-api.js/src/globalApi/extractFacesAndComputeResults.ts"],"sourcesContent":["import * as tf from '@tensorflow/tfjs-core';\r\nimport { TNetInput } from 'tfjs-image-recognition-base';\r\n\r\nimport { FaceDetection } from '../classes/FaceDetection';\r\nimport { extractFaces, extractFaceTensors } from '../dom';\r\nimport { WithFaceDetection } from '../factories/WithFaceDetection';\r\nimport { isWithFaceLandmarks, WithFaceLandmarks } from '../factories/WithFaceLandmarks';\r\n\r\nexport async function extractAllFacesAndComputeResults<TSource extends WithFaceDetection<{}>, TResult>(\r\n  parentResults: TSource[],\r\n  input: TNetInput,\r\n  computeResults: (faces: Array<HTMLCanvasElement | tf.Tensor3D>) => Promise<TResult>,\r\n  extractedFaces?: Array<HTMLCanvasElement | tf.Tensor3D> | null,\r\n  getRectForAlignment: (parentResult: WithFaceLandmarks<TSource, any>) => FaceDetection = ({ alignedRect }) => alignedRect\r\n) {\r\n  const faceBoxes = parentResults.map(parentResult =>\r\n    isWithFaceLandmarks(parentResult)\r\n      ? getRectForAlignment(parentResult)\r\n      : parentResult.detection\r\n  )\r\n  const faces: Array<HTMLCanvasElement | tf.Tensor3D> = extractedFaces || (\r\n    input instanceof tf.Tensor\r\n      ? await extractFaceTensors(input, faceBoxes)\r\n      : await extractFaces(input, faceBoxes)\r\n  )\r\n\r\n  const results = await computeResults(faces)\r\n\r\n  faces.forEach(f => f instanceof tf.Tensor && f.dispose())\r\n\r\n  return results\r\n}\r\n\r\nexport async function extractSingleFaceAndComputeResult<TSource extends WithFaceDetection<{}>, TResult>(\r\n  parentResult: TSource,\r\n  input: TNetInput,\r\n  computeResult: (face: HTMLCanvasElement | tf.Tensor3D) => Promise<TResult>,\r\n  extractedFaces?: Array<HTMLCanvasElement | tf.Tensor3D> | null,\r\n  getRectForAlignment?: (parentResult: WithFaceLandmarks<TSource, any>) => FaceDetection\r\n) {\r\n  return extractAllFacesAndComputeResults<TSource, TResult>(\r\n    [parentResult],\r\n    input,\r\n    async faces => computeResult(faces[0]),\r\n    extractedFaces,\r\n    getRectForAlignment\r\n  )\r\n}"],"mappings":";AAAA,OAAO,KAAKA,EAAE,MAAM,uBAAuB;AAI3C,SAASC,YAAY,EAAEC,kBAAkB,QAAQ,QAAQ;AAEzD,SAASC,mBAAmB,QAA2B,gCAAgC;AAEvF,OAAM,SAAgBC,gCAAgCA,CACpDC,aAAwB,EACxBC,KAAgB,EAChBC,cAAmF,EACnFC,cAA8D,EAC9DC,mBAAwH;EAAxH,IAAAA,mBAAA;IAAAA,mBAAA,YAAAA,CAAyFC,EAAe;UAAbC,WAAA,GAAAD,EAAA,CAAAC,WAAW;MAAO,OAAAA,WAAW;IAAX,CAAW;EAAA;;;;;;UAElHC,SAAS,GAAGP,aAAa,CAACQ,GAAG,CAAC,UAAAC,YAAY;YAC9C,OAAAX,mBAAmB,CAACW,YAAY,CAAC,GAC7BL,mBAAmB,CAACK,YAAY,CAAC,GACjCA,YAAY,CAACC,SAAS;UAF1B,CAE0B,CAC3B;UACqDL,EAAA,GAAAF,cAAc;kBAAd;gBACpDF,KAAK,YAAYN,EAAE,CAACgB,MAAM,GAA1B;UACI,qBAAMd,kBAAkB,CAACI,KAAK,EAAEM,SAAS,CAAC;;UAA1CK,EAAA,GAAAC,EAAA,CAAAC,IAAA,EAA0C;;;UAC1C,qBAAMlB,YAAY,CAACK,KAAK,EAAEM,SAAS,CAAC;;UAApCK,EAAA,GAAAC,EAAA,CAAAC,IAAA,EAAoC;;;UAH8BT,EAAA,GAAAO,EAIvE;;;UAJKG,KAAK,GAAAV,EAIV;UAEe,qBAAMH,cAAc,CAACa,KAAK,CAAC;;UAArCC,OAAO,GAAGH,EAAA,CAAAC,IAAA,EAA2B;UAE3CC,KAAK,CAACE,OAAO,CAAC,UAAAC,CAAC;YAAI,OAAAA,CAAC,YAAYvB,EAAE,CAACgB,MAAM,IAAIO,CAAC,CAACC,OAAO,EAAE;UAArC,CAAqC,CAAC;UAEzD,sBAAOH,OAAO;;;;;AAGhB,OAAM,SAAgBI,iCAAiCA,CACrDX,YAAqB,EACrBR,KAAgB,EAChBoB,aAA0E,EAC1ElB,cAA8D,EAC9DC,mBAAsF;;;;MAEtF,sBAAOL,gCAAgC,CACrC,CAACU,YAAY,CAAC,EACdR,KAAK,EACL,UAAMc,KAAK;QAAA,OAAAO,OAAA,CAAAC,SAAA,CAAAC,KAAA;UAAA,OAAAF,OAAA,CAAAG,WAAA,iBAAApB,EAAA;YAAI,sBAAAgB,aAAa,CAACN,KAAK,CAAC,CAAC,CAAC,CAAC;;;OAAA,EACtCZ,cAAc,EACdC,mBAAmB,CACpB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}