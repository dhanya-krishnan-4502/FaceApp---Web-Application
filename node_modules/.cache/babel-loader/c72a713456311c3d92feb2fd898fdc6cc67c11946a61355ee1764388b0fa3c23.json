{"ast":null,"code":"import * as tf from '@tensorflow/tfjs-core';\nimport { TfjsImageRecognitionBase } from 'tfjs-image-recognition-base';\nimport { fullyConnectedLayer } from '../common/fullyConnectedLayer';\nimport { prelu } from './prelu';\nimport { sharedLayer } from './sharedLayers';\nexport function ONet(x, params) {\n  return tf.tidy(function () {\n    var out = sharedLayer(x, params);\n    out = tf.maxPool(out, [2, 2], [2, 2], 'same');\n    out = TfjsImageRecognitionBase.convLayer(out, params.conv4, 'valid');\n    out = prelu(out, params.prelu4_alpha);\n    var vectorized = tf.reshape(out, [out.shape[0], params.fc1.weights.shape[0]]);\n    var fc1 = fullyConnectedLayer(vectorized, params.fc1);\n    var prelu5 = prelu(fc1, params.prelu5_alpha);\n    var fc2_1 = fullyConnectedLayer(prelu5, params.fc2_1);\n    var max = tf.expandDims(tf.max(fc2_1, 1), 1);\n    var prob = tf.softmax(tf.sub(fc2_1, max), 1);\n    var regions = fullyConnectedLayer(prelu5, params.fc2_2);\n    var points = fullyConnectedLayer(prelu5, params.fc2_3);\n    var scores = tf.unstack(prob, 1)[1];\n    return {\n      scores: scores,\n      regions: regions,\n      points: points\n    };\n  });\n}","map":{"version":3,"names":["tf","TfjsImageRecognitionBase","fullyConnectedLayer","prelu","sharedLayer","ONet","x","params","tidy","out","maxPool","convLayer","conv4","prelu4_alpha","vectorized","reshape","shape","fc1","weights","prelu5","prelu5_alpha","fc2_1","max","expandDims","prob","softmax","sub","regions","fc2_2","points","fc2_3","scores","unstack"],"sources":["/Users/dhanya/node_modules/face-api.js/src/mtcnn/ONet.ts"],"sourcesContent":["import * as tf from '@tensorflow/tfjs-core';\r\nimport { TfjsImageRecognitionBase } from 'tfjs-image-recognition-base';\r\n\r\nimport { fullyConnectedLayer } from '../common/fullyConnectedLayer';\r\nimport { prelu } from './prelu';\r\nimport { sharedLayer } from './sharedLayers';\r\nimport { ONetParams } from './types';\r\n\r\nexport function ONet(x: tf.Tensor4D, params: ONetParams): { scores: tf.Tensor1D, regions: tf.Tensor2D, points: tf.Tensor2D } {\r\n  return tf.tidy(() => {\r\n\r\n    let out = sharedLayer(x, params)\r\n    out = tf.maxPool(out, [2, 2], [2, 2], 'same')\r\n    out = TfjsImageRecognitionBase.convLayer(out, params.conv4, 'valid')\r\n    out = prelu<tf.Tensor4D>(out, params.prelu4_alpha)\r\n\r\n    const vectorized = tf.reshape(out, [out.shape[0], params.fc1.weights.shape[0]]) as tf.Tensor2D\r\n    const fc1 = fullyConnectedLayer(vectorized, params.fc1)\r\n    const prelu5 = prelu<tf.Tensor2D>(fc1, params.prelu5_alpha)\r\n    const fc2_1 = fullyConnectedLayer(prelu5, params.fc2_1)\r\n    const max = tf.expandDims(tf.max(fc2_1, 1), 1)\r\n\r\n    const prob = tf.softmax(tf.sub(fc2_1, max), 1) as tf.Tensor2D\r\n    const regions = fullyConnectedLayer(prelu5, params.fc2_2)\r\n    const points = fullyConnectedLayer(prelu5, params.fc2_3)\r\n\r\n    const scores = tf.unstack(prob, 1)[1] as tf.Tensor1D\r\n    return { scores, regions, points }\r\n  })\r\n}"],"mappings":"AAAA,OAAO,KAAKA,EAAE,MAAM,uBAAuB;AAC3C,SAASC,wBAAwB,QAAQ,6BAA6B;AAEtE,SAASC,mBAAmB,QAAQ,+BAA+B;AACnE,SAASC,KAAK,QAAQ,SAAS;AAC/B,SAASC,WAAW,QAAQ,gBAAgB;AAG5C,OAAM,SAAUC,IAAIA,CAACC,CAAc,EAAEC,MAAkB;EACrD,OAAOP,EAAE,CAACQ,IAAI,CAAC;IAEb,IAAIC,GAAG,GAAGL,WAAW,CAACE,CAAC,EAAEC,MAAM,CAAC;IAChCE,GAAG,GAAGT,EAAE,CAACU,OAAO,CAACD,GAAG,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,MAAM,CAAC;IAC7CA,GAAG,GAAGR,wBAAwB,CAACU,SAAS,CAACF,GAAG,EAAEF,MAAM,CAACK,KAAK,EAAE,OAAO,CAAC;IACpEH,GAAG,GAAGN,KAAK,CAAcM,GAAG,EAAEF,MAAM,CAACM,YAAY,CAAC;IAElD,IAAMC,UAAU,GAAGd,EAAE,CAACe,OAAO,CAACN,GAAG,EAAE,CAACA,GAAG,CAACO,KAAK,CAAC,CAAC,CAAC,EAAET,MAAM,CAACU,GAAG,CAACC,OAAO,CAACF,KAAK,CAAC,CAAC,CAAC,CAAC,CAAgB;IAC9F,IAAMC,GAAG,GAAGf,mBAAmB,CAACY,UAAU,EAAEP,MAAM,CAACU,GAAG,CAAC;IACvD,IAAME,MAAM,GAAGhB,KAAK,CAAcc,GAAG,EAAEV,MAAM,CAACa,YAAY,CAAC;IAC3D,IAAMC,KAAK,GAAGnB,mBAAmB,CAACiB,MAAM,EAAEZ,MAAM,CAACc,KAAK,CAAC;IACvD,IAAMC,GAAG,GAAGtB,EAAE,CAACuB,UAAU,CAACvB,EAAE,CAACsB,GAAG,CAACD,KAAK,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC;IAE9C,IAAMG,IAAI,GAAGxB,EAAE,CAACyB,OAAO,CAACzB,EAAE,CAAC0B,GAAG,CAACL,KAAK,EAAEC,GAAG,CAAC,EAAE,CAAC,CAAgB;IAC7D,IAAMK,OAAO,GAAGzB,mBAAmB,CAACiB,MAAM,EAAEZ,MAAM,CAACqB,KAAK,CAAC;IACzD,IAAMC,MAAM,GAAG3B,mBAAmB,CAACiB,MAAM,EAAEZ,MAAM,CAACuB,KAAK,CAAC;IAExD,IAAMC,MAAM,GAAG/B,EAAE,CAACgC,OAAO,CAACR,IAAI,EAAE,CAAC,CAAC,CAAC,CAAC,CAAgB;IACpD,OAAO;MAAEO,MAAM,EAAAA,MAAA;MAAEJ,OAAO,EAAAA,OAAA;MAAEE,MAAM,EAAAA;IAAA,CAAE;EACpC,CAAC,CAAC;AACJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}