{"ast":null,"code":"import * as tslib_1 from \"tslib\";\nimport * as tf from '@tensorflow/tfjs-core';\nimport { NeuralNetwork, normalize, range, toNetInput } from 'tfjs-image-recognition-base';\nimport { depthwiseSeparableConv } from '../common/depthwiseSeparableConv';\nimport { extractParams } from './extractParams';\nimport { extractParamsFromWeigthMap } from './extractParamsFromWeigthMap';\nfunction conv(x, params, stride) {\n  return tf.add(tf.conv2d(x, params.filters, stride, 'same'), params.bias);\n}\nfunction reductionBlock(x, params, isActivateInput) {\n  if (isActivateInput === void 0) {\n    isActivateInput = true;\n  }\n  var out = isActivateInput ? tf.relu(x) : x;\n  out = depthwiseSeparableConv(out, params.separable_conv0, [1, 1]);\n  out = depthwiseSeparableConv(tf.relu(out), params.separable_conv1, [1, 1]);\n  out = tf.maxPool(out, [3, 3], [2, 2], 'same');\n  out = tf.add(out, conv(x, params.expansion_conv, [2, 2]));\n  return out;\n}\nfunction mainBlock(x, params) {\n  var out = depthwiseSeparableConv(tf.relu(x), params.separable_conv0, [1, 1]);\n  out = depthwiseSeparableConv(tf.relu(out), params.separable_conv1, [1, 1]);\n  out = depthwiseSeparableConv(tf.relu(out), params.separable_conv2, [1, 1]);\n  out = tf.add(out, x);\n  return out;\n}\nvar TinyXception = /** @class */function (_super) {\n  tslib_1.__extends(TinyXception, _super);\n  function TinyXception(numMainBlocks) {\n    var _this = _super.call(this, 'TinyXception') || this;\n    _this._numMainBlocks = numMainBlocks;\n    return _this;\n  }\n  TinyXception.prototype.forwardInput = function (input) {\n    var _this = this;\n    var params = this.params;\n    if (!params) {\n      throw new Error('TinyXception - load model before inference');\n    }\n    return tf.tidy(function () {\n      var batchTensor = input.toBatchTensor(112, true);\n      var meanRgb = [122.782, 117.001, 104.298];\n      var normalized = normalize(batchTensor, meanRgb).div(tf.scalar(256));\n      var out = tf.relu(conv(normalized, params.entry_flow.conv_in, [2, 2]));\n      out = reductionBlock(out, params.entry_flow.reduction_block_0, false);\n      out = reductionBlock(out, params.entry_flow.reduction_block_1);\n      range(_this._numMainBlocks, 0, 1).forEach(function (idx) {\n        out = mainBlock(out, params.middle_flow[\"main_block_\" + idx]);\n      });\n      out = reductionBlock(out, params.exit_flow.reduction_block);\n      out = tf.relu(depthwiseSeparableConv(out, params.exit_flow.separable_conv, [1, 1]));\n      return out;\n    });\n  };\n  TinyXception.prototype.forward = function (input) {\n    return tslib_1.__awaiter(this, void 0, void 0, function () {\n      var _a;\n      return tslib_1.__generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            _a = this.forwardInput;\n            return [4 /*yield*/, toNetInput(input)];\n          case 1:\n            return [2 /*return*/, _a.apply(this, [_b.sent()])];\n        }\n      });\n    });\n  };\n  TinyXception.prototype.getDefaultModelName = function () {\n    return 'tiny_xception_model';\n  };\n  TinyXception.prototype.extractParamsFromWeigthMap = function (weightMap) {\n    return extractParamsFromWeigthMap(weightMap, this._numMainBlocks);\n  };\n  TinyXception.prototype.extractParams = function (weights) {\n    return extractParams(weights, this._numMainBlocks);\n  };\n  return TinyXception;\n}(NeuralNetwork);\nexport { TinyXception };","map":{"version":3,"names":["tf","NeuralNetwork","normalize","range","toNetInput","depthwiseSeparableConv","extractParams","extractParamsFromWeigthMap","conv","x","params","stride","add","conv2d","filters","bias","reductionBlock","isActivateInput","out","relu","separable_conv0","separable_conv1","maxPool","expansion_conv","mainBlock","separable_conv2","TinyXception","_super","tslib_1","__extends","numMainBlocks","_this","call","_numMainBlocks","prototype","forwardInput","input","Error","tidy","batchTensor","toBatchTensor","meanRgb","normalized","div","scalar","entry_flow","conv_in","reduction_block_0","reduction_block_1","forEach","idx","middle_flow","exit_flow","reduction_block","separable_conv","forward","_a","apply","_b","sent","getDefaultModelName","weightMap","weights"],"sources":["/Users/dhanya/node_modules/face-api.js/src/xception/TinyXception.ts"],"sourcesContent":["import * as tf from '@tensorflow/tfjs-core';\r\nimport {\r\n  NetInput,\r\n  NeuralNetwork,\r\n  normalize,\r\n  range,\r\n  TfjsImageRecognitionBase,\r\n  TNetInput,\r\n  toNetInput,\r\n} from 'tfjs-image-recognition-base';\r\n\r\nimport { depthwiseSeparableConv } from '../common/depthwiseSeparableConv';\r\nimport { bgrToRgbTensor } from '../mtcnn/bgrToRgbTensor';\r\nimport { extractParams } from './extractParams';\r\nimport { extractParamsFromWeigthMap } from './extractParamsFromWeigthMap';\r\nimport { MainBlockParams, ReductionBlockParams, TinyXceptionParams } from './types';\r\n\r\nfunction conv(x: tf.Tensor4D, params: TfjsImageRecognitionBase.ConvParams, stride: [number, number]): tf.Tensor4D {\r\n  return tf.add(tf.conv2d(x, params.filters, stride, 'same'), params.bias)\r\n}\r\n\r\nfunction reductionBlock(x: tf.Tensor4D, params: ReductionBlockParams, isActivateInput: boolean = true): tf.Tensor4D {\r\n  let out = isActivateInput ? tf.relu(x) : x\r\n  out = depthwiseSeparableConv(out, params.separable_conv0, [1, 1])\r\n  out = depthwiseSeparableConv(tf.relu(out),  params.separable_conv1, [1, 1])\r\n  out = tf.maxPool(out, [3, 3], [2, 2], 'same')\r\n  out = tf.add(out, conv(x,  params.expansion_conv, [2, 2]))\r\n  return out\r\n}\r\n\r\nfunction mainBlock(x: tf.Tensor4D, params: MainBlockParams): tf.Tensor4D {\r\n  let out = depthwiseSeparableConv(tf.relu(x), params.separable_conv0, [1, 1])\r\n  out = depthwiseSeparableConv(tf.relu(out), params.separable_conv1, [1, 1])\r\n  out = depthwiseSeparableConv(tf.relu(out), params.separable_conv2, [1, 1])\r\n  out = tf.add(out, x)\r\n  return out\r\n}\r\n\r\nexport class TinyXception extends NeuralNetwork<TinyXceptionParams> {\r\n\r\n  private _numMainBlocks: number\r\n\r\n  constructor(numMainBlocks: number) {\r\n    super('TinyXception')\r\n    this._numMainBlocks = numMainBlocks\r\n  }\r\n\r\n  public forwardInput(input: NetInput): tf.Tensor4D {\r\n\r\n    const { params } = this\r\n\r\n    if (!params) {\r\n      throw new Error('TinyXception - load model before inference')\r\n    }\r\n\r\n    return tf.tidy(() => {\r\n      const batchTensor = input.toBatchTensor(112, true)\r\n      const meanRgb = [122.782, 117.001, 104.298]\r\n      const normalized = normalize(batchTensor, meanRgb).div(tf.scalar(256)) as tf.Tensor4D\r\n\r\n      let out = tf.relu(conv(normalized, params.entry_flow.conv_in, [2, 2]))\r\n      out = reductionBlock(out, params.entry_flow.reduction_block_0, false)\r\n      out = reductionBlock(out, params.entry_flow.reduction_block_1)\r\n\r\n      range(this._numMainBlocks, 0, 1).forEach((idx) => {\r\n        out = mainBlock(out, params.middle_flow[`main_block_${idx}`])\r\n      })\r\n\r\n      out = reductionBlock(out, params.exit_flow.reduction_block)\r\n      out = tf.relu(depthwiseSeparableConv(out, params.exit_flow.separable_conv, [1, 1]))\r\n      return out\r\n    })\r\n  }\r\n\r\n  public async forward(input: TNetInput): Promise<tf.Tensor4D> {\r\n    return this.forwardInput(await toNetInput(input))\r\n  }\r\n\r\n  protected getDefaultModelName(): string {\r\n    return 'tiny_xception_model'\r\n  }\r\n\r\n  protected extractParamsFromWeigthMap(weightMap: tf.NamedTensorMap) {\r\n    return extractParamsFromWeigthMap(weightMap, this._numMainBlocks)\r\n  }\r\n\r\n  protected extractParams(weights: Float32Array) {\r\n    return extractParams(weights, this._numMainBlocks)\r\n  }\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}