{"ast":null,"code":"import * as tslib_1 from \"tslib\";\nimport { TfjsImageRecognitionBase } from 'tfjs-image-recognition-base';\nimport { MtcnnOptions } from '../mtcnn/MtcnnOptions';\nimport { SsdMobilenetv1Options } from '../ssdMobilenetv1';\nimport { detectAllFaces } from './detectFaces';\n// export allFaces API for backward compatibility\nexport function allFacesSsdMobilenetv1(input, minConfidence) {\n  return tslib_1.__awaiter(this, void 0, void 0, function () {\n    return tslib_1.__generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          return [4 /*yield*/, detectAllFaces(input, new SsdMobilenetv1Options(minConfidence ? {\n            minConfidence: minConfidence\n          } : {})).withFaceLandmarks().withFaceDescriptors()];\n        case 1:\n          return [2 /*return*/, _a.sent()];\n      }\n    });\n  });\n}\nexport function allFacesTinyYolov2(input, forwardParams) {\n  if (forwardParams === void 0) {\n    forwardParams = {};\n  }\n  return tslib_1.__awaiter(this, void 0, void 0, function () {\n    return tslib_1.__generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          return [4 /*yield*/, detectAllFaces(input, new TfjsImageRecognitionBase.TinyYolov2Options(forwardParams)).withFaceLandmarks().withFaceDescriptors()];\n        case 1:\n          return [2 /*return*/, _a.sent()];\n      }\n    });\n  });\n}\nexport function allFacesMtcnn(input, forwardParams) {\n  if (forwardParams === void 0) {\n    forwardParams = {};\n  }\n  return tslib_1.__awaiter(this, void 0, void 0, function () {\n    return tslib_1.__generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          return [4 /*yield*/, detectAllFaces(input, new MtcnnOptions(forwardParams)).withFaceLandmarks().withFaceDescriptors()];\n        case 1:\n          return [2 /*return*/, _a.sent()];\n      }\n    });\n  });\n}\nexport var allFaces = allFacesSsdMobilenetv1;","map":{"version":3,"names":["TfjsImageRecognitionBase","MtcnnOptions","SsdMobilenetv1Options","detectAllFaces","allFacesSsdMobilenetv1","input","minConfidence","withFaceLandmarks","withFaceDescriptors","_a","sent","allFacesTinyYolov2","forwardParams","TinyYolov2Options","allFacesMtcnn","allFaces"],"sources":["/Users/dhanya/node_modules/face-api.js/src/globalApi/allFaces.ts"],"sourcesContent":["import { TfjsImageRecognitionBase, TNetInput } from 'tfjs-image-recognition-base';\r\n\r\nimport { WithFaceDescriptor, WithFaceDetection, WithFaceLandmarks } from '../factories';\r\nimport { IMtcnnOptions, MtcnnOptions } from '../mtcnn/MtcnnOptions';\r\nimport { SsdMobilenetv1Options } from '../ssdMobilenetv1';\r\nimport { detectAllFaces } from './detectFaces';\r\n\r\n// export allFaces API for backward compatibility\r\n\r\nexport async function allFacesSsdMobilenetv1(\r\n  input: TNetInput,\r\n  minConfidence?: number\r\n): Promise<WithFaceDescriptor<WithFaceLandmarks<WithFaceDetection<{}>>>[]> {\r\n  return await detectAllFaces(input, new SsdMobilenetv1Options(minConfidence ? { minConfidence } : {}))\r\n    .withFaceLandmarks()\r\n    .withFaceDescriptors()\r\n}\r\n\r\nexport async function allFacesTinyYolov2(\r\n  input: TNetInput,\r\n  forwardParams: TfjsImageRecognitionBase.ITinyYolov2Options = {}\r\n): Promise<WithFaceDescriptor<WithFaceLandmarks<WithFaceDetection<{}>>>[]> {\r\n  return await detectAllFaces(input, new TfjsImageRecognitionBase.TinyYolov2Options(forwardParams))\r\n    .withFaceLandmarks()\r\n    .withFaceDescriptors()\r\n}\r\n\r\nexport async function allFacesMtcnn(\r\n  input: TNetInput,\r\n  forwardParams: IMtcnnOptions = {}\r\n): Promise<WithFaceDescriptor<WithFaceLandmarks<WithFaceDetection<{}>>>[]> {\r\n  return await detectAllFaces(input, new MtcnnOptions(forwardParams))\r\n    .withFaceLandmarks()\r\n    .withFaceDescriptors()\r\n}\r\n\r\nexport const allFaces = allFacesSsdMobilenetv1\r\n"],"mappings":";AAAA,SAASA,wBAAwB,QAAmB,6BAA6B;AAGjF,SAAwBC,YAAY,QAAQ,uBAAuB;AACnE,SAASC,qBAAqB,QAAQ,mBAAmB;AACzD,SAASC,cAAc,QAAQ,eAAe;AAE9C;AAEA,OAAM,SAAgBC,sBAAsBA,CAC1CC,KAAgB,EAChBC,aAAsB;;;;;UAEf,qBAAMH,cAAc,CAACE,KAAK,EAAE,IAAIH,qBAAqB,CAACI,aAAa,GAAG;YAAEA,aAAa,EAAAA;UAAA,CAAE,GAAG,EAAE,CAAC,CAAC,CAClGC,iBAAiB,EAAE,CACnBC,mBAAmB,EAAE;;UAFxB,sBAAOC,EAAA,CAAAC,IAAA,EAEiB;;;;;AAG1B,OAAM,SAAgBC,kBAAkBA,CACtCN,KAAgB,EAChBO,aAA+D;EAA/D,IAAAA,aAAA;IAAAA,aAAA,KAA+D;EAAA;;;;;UAExD,qBAAMT,cAAc,CAACE,KAAK,EAAE,IAAIL,wBAAwB,CAACa,iBAAiB,CAACD,aAAa,CAAC,CAAC,CAC9FL,iBAAiB,EAAE,CACnBC,mBAAmB,EAAE;;UAFxB,sBAAOC,EAAA,CAAAC,IAAA,EAEiB;;;;;AAG1B,OAAM,SAAgBI,aAAaA,CACjCT,KAAgB,EAChBO,aAAiC;EAAjC,IAAAA,aAAA;IAAAA,aAAA,KAAiC;EAAA;;;;;UAE1B,qBAAMT,cAAc,CAACE,KAAK,EAAE,IAAIJ,YAAY,CAACW,aAAa,CAAC,CAAC,CAChEL,iBAAiB,EAAE,CACnBC,mBAAmB,EAAE;;UAFxB,sBAAOC,EAAA,CAAAC,IAAA,EAEiB;;;;;AAG1B,OAAO,IAAMK,QAAQ,GAAGX,sBAAsB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}