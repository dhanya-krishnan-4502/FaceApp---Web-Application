{"ast":null,"code":"import * as tslib_1 from \"tslib\";\nimport * as tf from '@tensorflow/tfjs-core';\nimport { NetInput, NeuralNetwork } from 'tfjs-image-recognition-base';\nimport { fullyConnectedLayer } from '../common/fullyConnectedLayer';\nimport { extractParams } from './extractParams';\nimport { extractParamsFromWeigthMap } from './extractParamsFromWeigthMap';\nimport { seperateWeightMaps } from './util';\nvar FaceProcessor = /** @class */function (_super) {\n  tslib_1.__extends(FaceProcessor, _super);\n  function FaceProcessor(_name, faceFeatureExtractor) {\n    var _this = _super.call(this, _name) || this;\n    _this._faceFeatureExtractor = faceFeatureExtractor;\n    return _this;\n  }\n  Object.defineProperty(FaceProcessor.prototype, \"faceFeatureExtractor\", {\n    get: function () {\n      return this._faceFeatureExtractor;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  FaceProcessor.prototype.runNet = function (input) {\n    var _this = this;\n    var params = this.params;\n    if (!params) {\n      throw new Error(this._name + \" - load model before inference\");\n    }\n    return tf.tidy(function () {\n      var bottleneckFeatures = input instanceof NetInput ? _this.faceFeatureExtractor.forwardInput(input) : input;\n      return fullyConnectedLayer(bottleneckFeatures.as2D(bottleneckFeatures.shape[0], -1), params.fc);\n    });\n  };\n  FaceProcessor.prototype.dispose = function (throwOnRedispose) {\n    if (throwOnRedispose === void 0) {\n      throwOnRedispose = true;\n    }\n    this.faceFeatureExtractor.dispose(throwOnRedispose);\n    _super.prototype.dispose.call(this, throwOnRedispose);\n  };\n  FaceProcessor.prototype.loadClassifierParams = function (weights) {\n    var _a = this.extractClassifierParams(weights),\n      params = _a.params,\n      paramMappings = _a.paramMappings;\n    this._params = params;\n    this._paramMappings = paramMappings;\n  };\n  FaceProcessor.prototype.extractClassifierParams = function (weights) {\n    return extractParams(weights, this.getClassifierChannelsIn(), this.getClassifierChannelsOut());\n  };\n  FaceProcessor.prototype.extractParamsFromWeigthMap = function (weightMap) {\n    var _a = seperateWeightMaps(weightMap),\n      featureExtractorMap = _a.featureExtractorMap,\n      classifierMap = _a.classifierMap;\n    this.faceFeatureExtractor.loadFromWeightMap(featureExtractorMap);\n    return extractParamsFromWeigthMap(classifierMap);\n  };\n  FaceProcessor.prototype.extractParams = function (weights) {\n    var cIn = this.getClassifierChannelsIn();\n    var cOut = this.getClassifierChannelsOut();\n    var classifierWeightSize = cOut * cIn + cOut;\n    var featureExtractorWeights = weights.slice(0, weights.length - classifierWeightSize);\n    var classifierWeights = weights.slice(weights.length - classifierWeightSize);\n    this.faceFeatureExtractor.extractWeights(featureExtractorWeights);\n    return this.extractClassifierParams(classifierWeights);\n  };\n  return FaceProcessor;\n}(NeuralNetwork);\nexport { FaceProcessor };","map":{"version":3,"names":["tf","NetInput","NeuralNetwork","fullyConnectedLayer","extractParams","extractParamsFromWeigthMap","seperateWeightMaps","FaceProcessor","_super","tslib_1","__extends","_name","faceFeatureExtractor","_this","call","_faceFeatureExtractor","Object","defineProperty","prototype","get","runNet","input","params","Error","tidy","bottleneckFeatures","forwardInput","as2D","shape","fc","dispose","throwOnRedispose","loadClassifierParams","weights","_a","extractClassifierParams","paramMappings","_params","_paramMappings","getClassifierChannelsIn","getClassifierChannelsOut","weightMap","featureExtractorMap","classifierMap","loadFromWeightMap","cIn","cOut","classifierWeightSize","featureExtractorWeights","slice","length","classifierWeights","extractWeights"],"sources":["/Users/dhanya/node_modules/face-api.js/src/faceProcessor/FaceProcessor.ts"],"sourcesContent":["import * as tf from '@tensorflow/tfjs-core';\r\nimport { NetInput, NeuralNetwork } from 'tfjs-image-recognition-base';\r\n\r\nimport { fullyConnectedLayer } from '../common/fullyConnectedLayer';\r\nimport {\r\n  FaceFeatureExtractorParams,\r\n  IFaceFeatureExtractor,\r\n  TinyFaceFeatureExtractorParams,\r\n} from '../faceFeatureExtractor/types';\r\nimport { extractParams } from './extractParams';\r\nimport { extractParamsFromWeigthMap } from './extractParamsFromWeigthMap';\r\nimport { NetParams } from './types';\r\nimport { seperateWeightMaps } from './util';\r\n\r\nexport abstract class FaceProcessor<\r\n  TExtractorParams extends FaceFeatureExtractorParams | TinyFaceFeatureExtractorParams\r\n>\r\n  extends NeuralNetwork<NetParams> {\r\n\r\n  protected _faceFeatureExtractor: IFaceFeatureExtractor<TExtractorParams>\r\n\r\n  constructor(_name: string, faceFeatureExtractor: IFaceFeatureExtractor<TExtractorParams>) {\r\n    super(_name)\r\n    this._faceFeatureExtractor = faceFeatureExtractor\r\n  }\r\n\r\n  public get faceFeatureExtractor(): IFaceFeatureExtractor<TExtractorParams> {\r\n    return this._faceFeatureExtractor\r\n  }\r\n\r\n  protected abstract getDefaultModelName(): string\r\n  protected abstract getClassifierChannelsIn(): number\r\n  protected abstract getClassifierChannelsOut(): number\r\n\r\n  public runNet(input: NetInput | tf.Tensor4D): tf.Tensor2D {\r\n\r\n    const { params } = this\r\n\r\n    if (!params) {\r\n      throw new Error(`${this._name} - load model before inference`)\r\n    }\r\n\r\n    return tf.tidy(() => {\r\n      const bottleneckFeatures = input instanceof NetInput\r\n        ? this.faceFeatureExtractor.forwardInput(input)\r\n        : input\r\n      return fullyConnectedLayer(bottleneckFeatures.as2D(bottleneckFeatures.shape[0], -1), params.fc)\r\n    })\r\n  }\r\n\r\n  public dispose(throwOnRedispose: boolean = true) {\r\n    this.faceFeatureExtractor.dispose(throwOnRedispose)\r\n    super.dispose(throwOnRedispose)\r\n  }\r\n\r\n  public loadClassifierParams(weights: Float32Array) {\r\n    const { params, paramMappings } = this.extractClassifierParams(weights)\r\n    this._params = params\r\n    this._paramMappings = paramMappings\r\n  }\r\n\r\n  public extractClassifierParams(weights: Float32Array) {\r\n    return extractParams(weights, this.getClassifierChannelsIn(), this.getClassifierChannelsOut())\r\n  }\r\n\r\n  protected extractParamsFromWeigthMap(weightMap: tf.NamedTensorMap) {\r\n\r\n    const { featureExtractorMap, classifierMap } = seperateWeightMaps(weightMap)\r\n\r\n    this.faceFeatureExtractor.loadFromWeightMap(featureExtractorMap)\r\n\r\n    return extractParamsFromWeigthMap(classifierMap)\r\n  }\r\n\r\n  protected extractParams(weights: Float32Array) {\r\n\r\n    const cIn = this.getClassifierChannelsIn()\r\n    const cOut = this.getClassifierChannelsOut()\r\n    const classifierWeightSize = (cOut * cIn ) + cOut\r\n\r\n    const featureExtractorWeights = weights.slice(0, weights.length - classifierWeightSize)\r\n    const classifierWeights = weights.slice(weights.length - classifierWeightSize)\r\n\r\n    this.faceFeatureExtractor.extractWeights(featureExtractorWeights)\r\n    return this.extractClassifierParams(classifierWeights)\r\n  }\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}